{"version":3,"sources":["components/Clock.tsx","App.tsx","index.tsx"],"names":["Clock","state","time","Date","timer","this","setInterval","newD","setState","console","info","toUTCString","slice","prevProps","clockName","props","window","debug","clearInterval","className","React","Component","getRandomName","value","now","toString","App","hasClock","document","addEventListener","event","preventDefault","ReactDOM","render","getElementById"],"mappings":"sNAUaA,EAAb,4MACEC,MAAQ,CACNC,KAAM,IAAIC,MAFd,EAKEC,WALF,yDAOE,WAAqB,IAAD,OAClBC,KAAKD,MAAQE,aAAY,WACvB,IAAMC,EAAO,IAAIJ,KAEjB,EAAKK,SAAS,CAAEN,KAAMK,IAEtBE,QAAQC,KAAKH,EAAKI,cAAcC,OAAO,IAAK,MAC3C,OAdP,gCAiBE,SAAmBC,GACjB,IAAQC,EAAcT,KAAKU,MAAnBD,UAEJA,IAAcD,EAAUC,WAC1BE,OAAOP,QAAQQ,MAAf,uBAAqCJ,EAAUC,UAA/C,eAA+DA,MArBrE,kCAyBE,WACMT,KAAKD,OACPc,cAAcb,KAAKD,SA3BzB,oBA+BE,WACE,OACE,sBAAKe,UAAU,QAAf,UACE,wBAAQA,UAAU,cAAlB,mBACMd,KAAKU,MAAMD,aAGhB,YAED,sBAAMK,UAAU,cAAhB,SACGd,KAAKJ,MAAMC,KAAKS,cAAcC,OAAO,IAAK,YAzCrD,GAA2BQ,IAAMC,WCNjC,SAASC,IACP,IAAMC,EAAQpB,KAAKqB,MAAMC,WAAWb,OAAO,GAE3C,MAAM,SAAN,OAAgBW,GAQX,IAAMG,EAAb,4MACEzB,MAAQ,CACN0B,UAAU,EACVb,UAAW,WAHf,uDAME,WAAqB,IAAD,OAClBE,OAAOV,aAAY,WACjB,EAAKE,SAAS,CAAEM,UAAWQ,QAC1B,MAEHM,SAASC,iBAAiB,eAAe,SAACC,GACxCA,EAAMC,iBAEN,EAAKvB,SAAS,CAAEmB,UAAU,OAG5BC,SAASC,iBAAiB,SAAS,WACjC,EAAKrB,SAAS,CAAEmB,UAAU,SAlBhC,oBAsBE,WACE,OACE,sBAAKR,UAAU,MAAf,UACE,6CAGGd,KAAKJ,MAAM0B,UACV,cAAC,EAAD,CAAOb,UAAWT,KAAKJ,MAAMa,mBA7BzC,GAAyBM,IAAMC,WCZ/BW,IAASC,OACP,cAAC,EAAD,IACAL,SAASM,eAAe,W","file":"static/js/main.bad61ba6.chunk.js","sourcesContent":["import React from 'react';\n\ntype Props = {\n  clockName: string,\n};\n\ntype State = {\n  time: Date,\n};\n\nexport class Clock extends React.Component<Props, State> {\n  state = {\n    time: new Date(),\n  };\n\n  timer?: NodeJS.Timeout;\n\n  componentDidMount() {\n    this.timer = setInterval(() => {\n      const newD = new Date();\n\n      this.setState({ time: newD });\n      // eslint-disable-next-line no-console\n      console.info(newD.toUTCString().slice(-12, -4));\n    }, 1000);\n  }\n\n  componentDidUpdate(prevProps: Props): void {\n    const { clockName } = this.props;\n\n    if (clockName !== prevProps.clockName) {\n      window.console.debug(`Renamed from ${prevProps.clockName} to ${clockName}`);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Clock\">\n        <strong className=\"Clock__name\">\n          {`${this.props.clockName}`}\n        </strong>\n\n        {' time is '}\n\n        <span className=\"Clock__time\">\n          {this.state.time.toUTCString().slice(-12, -4)}\n        </span>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Clock } from './components/Clock';\n\nfunction getRandomName(): string {\n  const value = Date.now().toString().slice(-4);\n\n  return `Clock-${value}`;\n}\n\ntype State = {\n  hasClock: boolean,\n  clockName: string,\n};\n\nexport class App extends React.Component<{}, State> {\n  state = {\n    hasClock: true,\n    clockName: 'Clock-0',\n  };\n\n  componentDidMount() {\n    window.setInterval(() => {\n      this.setState({ clockName: getRandomName() });\n    }, 3300);\n\n    document.addEventListener('contextmenu', (event: MouseEvent) => {\n      event.preventDefault();\n\n      this.setState({ hasClock: false });\n    });\n\n    document.addEventListener('click', () => {\n      this.setState({ hasClock: true });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n\n        {\n          (this.state.hasClock && (\n            <Clock clockName={this.state.clockName} />\n          )\n          )\n        }\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}